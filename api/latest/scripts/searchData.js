pages = [{"l":"index.html","n":"aoc-N/A","t":"aoc-N/A","d":"","k":"static"},
{"l":"aoc/utils.html","n":"aoc.utils","t":"package aoc.utils","d":"aoc/utils","k":"package"},
{"l":"aoc/utils.html","n":"*","t":"def *(mat: Matrix[A])(implicit evidence$1: Numeric[A]): Vector[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"*","t":"def *(other: Matrix[A])(implicit evidence$4: Numeric[A]): Matrix[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"*","t":"def *(vec: Vector[A])(implicit evidence$5: Numeric[A]): Vector[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"+","t":"def +(other: Matrix[A])(implicit evidence$9: Numeric[A]): Matrix[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"+","t":"def +(other: Pos2D): (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"+","t":"def +(other: Vec3): (Int, Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"-","t":"def -(other: Matrix[A])(implicit evidence$10: Numeric[A]): Matrix[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"-","t":"def -(other: Pos2D): (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"-","t":"def -(other: Vec3): (Int, Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"Pos2D","t":"type Pos2D = Vec2","d":"aoc/utils","k":"type"},
{"l":"aoc/utils.html","n":"Pos3D","t":"type Pos3D = Vec3","d":"aoc/utils","k":"type"},
{"l":"aoc/utils.html","n":"Vec2","t":"type Vec2 = (Int, Int)","d":"aoc/utils","k":"type"},
{"l":"aoc/utils.html","n":"Vec3","t":"type Vec3 = (Int, Int, Int)","d":"aoc/utils","k":"type"},
{"l":"aoc/utils.html","n":"average","t":"def average(implicit evidence$1: Numeric[A]): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"col","t":"def col: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"converge","t":"def converge(f: A => A): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"cross","t":"def cross(ys: Vector[A])(implicit evidence$6: Numeric[A]): Vector[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"cross","t":"def cross(other: Vec3): Vec3","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"determinant","t":"def determinant(implicit evidence$6: Numeric[A]): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"determinantOption","t":"def determinantOption(implicit evidence$8: Numeric[A]): Option[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"distance","t":"def distance(other: Pos2D): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"distance","t":"def distance(other: Vec3): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"dl","t":"def dl: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"doUntil","t":"def doUntil(p: A => Boolean)(f: A => A): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"dot","t":"def dot(ys: Vector[A])(implicit evidence$5: Numeric[A]): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"dot","t":"def dot(other: Vec3): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"down","t":"def down: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"dr","t":"def dr: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"findAllMatchWith","t":"def findAllMatchWith(regex: String): List[Match]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"findAllWith","t":"def findAllWith(regex: String): List[String]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"findMatchWith","t":"def findMatchWith(regex: String): Option[Match]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"findWith","t":"def findWith(regex: String): Option[String]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"flatten","t":"def flatten: Matrix[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"iterate","t":"def iterate(f: A => A)(n: Int): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"left","t":"def left: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"lg","t":"def lg: A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"lines","t":"def lines: List[String]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"log","t":"def log: A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"logAttr","t":"def logAttr[B](f: A => B): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"logCol","t":"def logCol(color: String): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"magnitude","t":"def magnitude(implicit evidence$7: Numeric[A]): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"magnitude","t":"def magnitude: Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"manhattan","t":"def manhattan(other: Pos2D): Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"manhattan","t":"def manhattan(other: Vec3): Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"median","t":"def median(implicit evidence$2: Numeric[A], Ordering[A]): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"move","t":"def move(dir: Cardinal): (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"move","t":"def move(dir: Hex): (Int, Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"neighbours","t":"def neighbours: List[Pos2D]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"neighboursDiag","t":"def neighboursDiag: List[(Int, Int)]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"neighboursDiagIn","t":"def neighboursDiagIn[A](using mat: Matrix[A]): List[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"neighboursIn","t":"def neighboursIn[A](using mat: Matrix[A]): List[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"neighboursOrth","t":"def neighboursOrth: List[(Int, Int)]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"neighboursOrthIn","t":"def neighboursOrthIn[A](using mat: Matrix[A]): List[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"normalized","t":"def normalized(implicit evidence$8: Numeric[A]): Vector[Double]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"normalized","t":"def normalized: Vec3","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"padLeftTo","t":"def padLeftTo(n: Int, char: Char): String","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"product","t":"def product(implicit evidence$3: Numeric[A]): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"q","t":"def q: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"r","t":"def r: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"right","t":"def right: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"rms","t":"def rms(implicit evidence$3: Numeric[A]): Double","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"row","t":"def row: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"s","t":"def s: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"space","t":"def space: A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"sum","t":"def sum(implicit evidence$2: Numeric[A]): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"toInt","t":"def toInt: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"toMatrix","t":"def toMatrix: Matrix[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"toVec3","t":"def toVec3(implicit evidence$4: Numeric[A]): (Int, Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"toVector","t":"def toVector: Vector[Int]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"toVector","t":"def toVector: Vector[Int]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"trace","t":"def trace(implicit evidence$7: Numeric[A]): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"traceOption","t":"def traceOption(implicit evidence$9: Numeric[A]): Option[A]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"transpose","t":"def transpose: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"ul","t":"def ul: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"up","t":"def up: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"ur","t":"def ur: (Int, Int)","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"warn","t":"def warn(p: A => Boolean): A","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"words","t":"def words: List[String]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"x","t":"def x: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"x","t":"def x: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"y","t":"def y: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"y","t":"def y: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"z","t":"def z: Int","d":"aoc/utils","k":"def"},
{"l":"aoc/utils.html","n":"zipWith","t":"def zipWith[B, C](ys: IndexedSeq[B])(f: (A, B) => C): IndexedSeq[C]","d":"aoc/utils","k":"def"},
{"l":"aoc/utils/Cardinal.html","n":"Cardinal","t":"enum Cardinal(y: Int, x: Int)","d":"aoc/utils/Cardinal","k":"enum"},
{"l":"aoc/utils/Cardinal.html","n":"North","t":"case North extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"NorthEast","t":"case NorthEast extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"East","t":"case East extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"SouthEast","t":"case SouthEast extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"South","t":"case South extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"SouthWest","t":"case SouthWest extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"West","t":"case West extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/Cardinal.html","n":"NorthWest","t":"case NorthWest extends Cardinal","d":"aoc/utils/Cardinal","k":"case"},
{"l":"aoc/utils/DisjointSets.html","n":"DisjointSets","t":"class DisjointSets[V](nodes: V*)","d":"aoc/utils/DisjointSets","k":"class"},
{"l":"aoc/utils/DisjointSets.html","n":"add","t":"def add(v: V): Unit","d":"aoc/utils/DisjointSets","k":"def"},
{"l":"aoc/utils/DisjointSets.html","n":"findSet","t":"def findSet(v: V): V","d":"aoc/utils/DisjointSets","k":"def"},
{"l":"aoc/utils/DisjointSets.html","n":"makeUnion","t":"def makeUnion(a: V, b: V): Unit","d":"aoc/utils/DisjointSets","k":"def"},
{"l":"aoc/utils/DisjointSets.html","n":"parents","t":"val parents: Map[V, V]","d":"aoc/utils/DisjointSets","k":"val"},
{"l":"aoc/utils/DisjointSets.html","n":"rank","t":"val rank: Map[V, Int]","d":"aoc/utils/DisjointSets","k":"val"},
{"l":"aoc/utils/DisjointSets$.html","n":"DisjointSets","t":"object DisjointSets","d":"aoc/utils/DisjointSets$","k":"object"},
{"l":"aoc/utils/DisjointSets$.html","n":"apply","t":"def apply[V](nodes: Iterable[V]): DisjointSets[V]","d":"aoc/utils/DisjointSets$","k":"def"},
{"l":"aoc/utils/Edge.html","n":"Edge","t":"class Edge[V](from: V, to: V, weight: Double)","d":"aoc/utils/Edge","k":"class"},
{"l":"aoc/utils/Edge.html","n":"reverse","t":"val reverse: Edge[V]","d":"aoc/utils/Edge","k":"val"},
{"l":"aoc/utils/Edge.html","n":"u","t":"val u: V","d":"aoc/utils/Edge","k":"val"},
{"l":"aoc/utils/Edge.html","n":"v","t":"val v: V","d":"aoc/utils/Edge","k":"val"},
{"l":"aoc/utils/FiniteGraph.html","n":"FiniteGraph","t":"class FiniteGraph[V](elems: Set[Edge[V]]) extends Graph[V]","d":"aoc/utils/FiniteGraph","k":"class"},
{"l":"aoc/utils/FiniteGraph.html","n":"edges","t":"val edges: Set[Edge[V]]","d":"aoc/utils/FiniteGraph","k":"val"},
{"l":"aoc/utils/FiniteGraph.html","n":"edgesFrom","t":"val edgesFrom: Map[V, Set[Edge[V]]]","d":"aoc/utils/FiniteGraph","k":"val"},
{"l":"aoc/utils/FiniteGraph.html","n":"edgesTo","t":"val edgesTo: Map[V, Set[Edge[V]]]","d":"aoc/utils/FiniteGraph","k":"val"},
{"l":"aoc/utils/FiniteGraph.html","n":"transpose","t":"def transpose: FiniteGraph[V]","d":"aoc/utils/FiniteGraph","k":"def"},
{"l":"aoc/utils/FiniteGraph.html","n":"vertices","t":"val vertices: Set[V]","d":"aoc/utils/FiniteGraph","k":"val"},
{"l":"aoc/utils/Graph.html","n":"Graph","t":"trait Graph[V]","d":"aoc/utils/Graph","k":"trait"},
{"l":"aoc/utils/Graph.html","n":"apply","t":"def apply(v: V): Set[Edge[V]]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"apply","t":"def apply(a: V)(b: V): Option[Double]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"edges","t":"def edges: Set[Edge[V]]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"edgesFrom","t":"def edgesFrom: Map[V, Set[Edge[V]]]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"edgesTo","t":"def edgesTo: Map[V, Set[Edge[V]]]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"pathBetween","t":"def pathBetween(start: V, end: V, heuristic: V => Double): Option[Path[V]]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"pathsFrom","t":"def pathsFrom(start: V): Set[Path[V]]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"reachableFrom","t":"def reachableFrom(start: V): Set[V]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph.html","n":"vertices","t":"def vertices: Set[V]","d":"aoc/utils/Graph","k":"def"},
{"l":"aoc/utils/Graph$.html","n":"Graph","t":"object Graph","d":"aoc/utils/Graph$","k":"object"},
{"l":"aoc/utils/Graph$.html","n":"aStar","t":"def aStar[V](start: V, end: V, heuristic: V => Double)(using V => Set[Edge[V]]): Option[Path[V]]","d":"aoc/utils/Graph$","k":"def"},
{"l":"aoc/utils/Graph$.html","n":"apply","t":"def apply[V](adjacencyFunction: V => Set[Edge[V]]): LazyGraph[V]","d":"aoc/utils/Graph$","k":"def"},
{"l":"aoc/utils/Graph$.html","n":"apply","t":"def apply[V](edges: Set[Edge[V]]): FiniteGraph[V]","d":"aoc/utils/Graph$","k":"def"},
{"l":"aoc/utils/Graph$.html","n":"apply","t":"def apply[V](elems: Edge[V]*): FiniteGraph[V]","d":"aoc/utils/Graph$","k":"def"},
{"l":"aoc/utils/Graph$.html","n":"dijkstra","t":"def dijkstra[V](start: V)(using V => Set[Edge[V]]): Set[Path[V]]","d":"aoc/utils/Graph$","k":"def"},
{"l":"aoc/utils/Hex.html","n":"Hex","t":"enum Hex(q: Int, r: Int, s: Int)","d":"aoc/utils/Hex","k":"enum"},
{"l":"aoc/utils/Hex.html","n":"North","t":"case North extends Hex","d":"aoc/utils/Hex","k":"case"},
{"l":"aoc/utils/Hex.html","n":"NorthEast","t":"case NorthEast extends Hex","d":"aoc/utils/Hex","k":"case"},
{"l":"aoc/utils/Hex.html","n":"SouthEast","t":"case SouthEast extends Hex","d":"aoc/utils/Hex","k":"case"},
{"l":"aoc/utils/Hex.html","n":"South","t":"case South extends Hex","d":"aoc/utils/Hex","k":"case"},
{"l":"aoc/utils/Hex.html","n":"SouthWest","t":"case SouthWest extends Hex","d":"aoc/utils/Hex","k":"case"},
{"l":"aoc/utils/Hex.html","n":"NorthWest","t":"case NorthWest extends Hex","d":"aoc/utils/Hex","k":"case"},
{"l":"aoc/utils/LazyGraph.html","n":"LazyGraph","t":"class LazyGraph[V](adjacencyFunction: V => Set[Edge[V]]) extends Graph[V]","d":"aoc/utils/LazyGraph","k":"class"},
{"l":"aoc/utils/LazyGraph.html","n":"edges","t":"def edges: Set[Edge[V]]","d":"aoc/utils/LazyGraph","k":"def"},
{"l":"aoc/utils/LazyGraph.html","n":"edgesFrom","t":"def edgesFrom: Map[V, Set[Edge[V]]]","d":"aoc/utils/LazyGraph","k":"def"},
{"l":"aoc/utils/LazyGraph.html","n":"edgesTo","t":"def edgesTo: Map[V, Set[Edge[V]]]","d":"aoc/utils/LazyGraph","k":"def"},
{"l":"aoc/utils/LazyGraph.html","n":"vertices","t":"def vertices: Set[V]","d":"aoc/utils/LazyGraph","k":"def"},
{"l":"aoc/utils/Line.html","n":"Line","t":"class Line(start: Pos2D, end: Pos2D)","d":"aoc/utils/Line","k":"class"},
{"l":"aoc/utils/Line3D.html","n":"Line3D","t":"class Line3D(start: Pos3D, end: Pos3D)","d":"aoc/utils/Line3D","k":"class"},
{"l":"aoc/utils/Matrix.html","n":"Matrix","t":"class Matrix[A](input: Vector[Vector[A]])","d":"aoc/utils/Matrix","k":"class"},
{"l":"aoc/utils/Matrix.html","n":"appendBottom","t":"def appendBottom(other: Matrix[A]): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"appendLeft","t":"def appendLeft(other: Matrix[A]): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"appendRight","t":"def appendRight(other: Matrix[A]): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"appendTop","t":"def appendTop(other: Matrix[A]): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"apply","t":"def apply(row: Int, col: Int): A","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"apply","t":"def apply(index: Pos2D): A","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"col","t":"def col(col: Int): Vector[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"cols","t":"def cols: Vector[Vector[A]]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"count","t":"def count(f: A => Boolean): Int","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"dropCol","t":"def dropCol(col: Int): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"dropRow","t":"def dropRow(row: Int): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"exists","t":"def exists(f: A => Boolean): Boolean","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"filterCol","t":"def filterCol(f: Vector[A] => Boolean): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"filterRow","t":"def filterRow(f: Vector[A] => Boolean): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"flipCols","t":"def flipCols: Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"flipRows","t":"def flipRows: Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"forEach","t":"def forEach(f: A => Unit): Unit","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"forall","t":"def forall(f: A => Boolean): Boolean","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"height","t":"val height: Int","d":"aoc/utils/Matrix","k":"val"},
{"l":"aoc/utils/Matrix.html","n":"indexOutsideBounds","t":"def indexOutsideBounds(row: Int, col: Int): Boolean","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"indexOutsideBounds","t":"def indexOutsideBounds(index: Pos2D): Boolean","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"indices","t":"def indices: Matrix[(Int, Int)]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"isSquare","t":"def isSquare: Boolean","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"map","t":"def map[B](f: A => B): Matrix[B]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"rotateLeft","t":"def rotateLeft: Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"rotateRight","t":"def rotateRight: Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"row","t":"def row(row: Int): Vector[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"rows","t":"def rows: Vector[Vector[A]]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"size","t":"val size: (Int, Int)","d":"aoc/utils/Matrix","k":"val"},
{"l":"aoc/utils/Matrix.html","n":"slice","t":"def slice(row: Int, col: Int)(width: Int, height: Int): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"slice","t":"def slice(index: Pos2D)(width: Int, height: Int): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"swapCols","t":"def swapCols(a: Int, b: Int): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"swapRows","t":"def swapRows(a: Int, b: Int): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"toVector","t":"def toVector: Vector[Vector[A]]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"toVectors","t":"def toVectors: Vector[Vector[A]]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"transpose","t":"def transpose: Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"updated","t":"def updated(row: Int, col: Int)(value: A): Matrix[A]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"width","t":"val width: Int","d":"aoc/utils/Matrix","k":"val"},
{"l":"aoc/utils/Matrix.html","n":"zip","t":"def zip[B](other: Matrix[B]): Matrix[(A, B)]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"zipWith","t":"def zipWith[B, C](other: Matrix[B])(f: (A, B) => C): Matrix[C]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix.html","n":"zipWithIndex","t":"def zipWithIndex: Matrix[(A, Pos2D)]","d":"aoc/utils/Matrix","k":"def"},
{"l":"aoc/utils/Matrix$.html","n":"Matrix","t":"object Matrix","d":"aoc/utils/Matrix$","k":"object"},
{"l":"aoc/utils/Matrix$.html","n":"apply","t":"def apply[A](height: Int, width: Int)(f: Pos2D => A): Matrix[A]","d":"aoc/utils/Matrix$","k":"def"},
{"l":"aoc/utils/Matrix$.html","n":"fill","t":"def fill[A](height: Int, width: Int)(value: A): Matrix[A]","d":"aoc/utils/Matrix$","k":"def"},
{"l":"aoc/utils/Matrix$.html","n":"identity","t":"def identity(size: Int): Matrix[Int]","d":"aoc/utils/Matrix$","k":"def"},
{"l":"aoc/utils/Matrix$.html","n":"rotation","t":"def rotation(rad: Double): Matrix[Double]","d":"aoc/utils/Matrix$","k":"def"},
{"l":"aoc/utils/Matrix$.html","n":"rotation","t":"def rotation(rad: Double, dir: Axis): Matrix[AnyVal]","d":"aoc/utils/Matrix$","k":"def"},
{"l":"aoc/utils/Matrix$$Axis.html","n":"Axis","t":"enum Axis","d":"aoc/utils/Matrix$$Axis","k":"enum"},
{"l":"aoc/utils/Matrix$$Axis.html","n":"X","t":"case X extends Axis","d":"aoc/utils/Matrix$$Axis","k":"case"},
{"l":"aoc/utils/Matrix$$Axis.html","n":"Y","t":"case Y extends Axis","d":"aoc/utils/Matrix$$Axis","k":"case"},
{"l":"aoc/utils/Matrix$$Axis.html","n":"Z","t":"case Z extends Axis","d":"aoc/utils/Matrix$$Axis","k":"case"},
{"l":"aoc/utils/Path.html","n":"Path","t":"class Path[V](vertices: Seq[V], cost: Double)","d":"aoc/utils/Path","k":"class"},
{"l":"aoc/utils/Path.html","n":"apply","t":"def apply: Int => V","d":"aoc/utils/Path","k":"def"},
{"l":"aoc/utils/Path.html","n":"head","t":"def head: V","d":"aoc/utils/Path","k":"def"},
{"l":"aoc/utils/Path.html","n":"last","t":"def last: V","d":"aoc/utils/Path","k":"def"},
{"l":"aoc/utils/Path.html","n":"reverse","t":"val reverse: Path[V]","d":"aoc/utils/Path","k":"val"},
{"l":"aoc/utils/Problem.html","n":"Problem","t":"class Problem[A](val year: String, val day: String, val part: String)(val expectedExampleSolution: A) extends App","d":"aoc/utils/Problem","k":"class"},
{"l":"aoc/utils/Problem.html","n":"day","t":"val day: String","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/Problem.html","n":"exampleInput","t":"val exampleInput: Option[Vector[String]]","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/Problem.html","n":"execute","t":"def execute(using printResult: Boolean): Option[TimedEval[A]]","d":"aoc/utils/Problem","k":"def"},
{"l":"aoc/utils/Problem.html","n":"expectedExampleSolution","t":"val expectedExampleSolution: A","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/Problem.html","n":"name","t":"def name: String","d":"aoc/utils/Problem","k":"def"},
{"l":"aoc/utils/Problem.html","n":"part","t":"val part: String","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/Problem.html","n":"puzzleInput","t":"val puzzleInput: Option[Vector[String]]","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/Problem.html","n":"result","t":"val result: Option[TimedEval[A]]","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/Problem.html","n":"solve","t":"def solve(data: Seq[String]): A","d":"aoc/utils/Problem","k":"def"},
{"l":"aoc/utils/Problem.html","n":"year","t":"val year: String","d":"aoc/utils/Problem","k":"val"},
{"l":"aoc/utils/TimedEval.html","n":"TimedEval","t":"class TimedEval[A](duration: Double, result: A)","d":"aoc/utils/TimedEval","k":"class"},
{"l":"aoc/utils/TimedEval$.html","n":"TimedEval","t":"object TimedEval","d":"aoc/utils/TimedEval$","k":"object"},
{"l":"aoc/utils/TimedEval$.html","n":"logTime","t":"def logTime[A](block: => A): A","d":"aoc/utils/TimedEval$","k":"def"},
{"l":"aoc/utils/TimedEval$.html","n":"time","t":"def time[A](block: => A): TimedEval[A]","d":"aoc/utils/TimedEval$","k":"def"},
{"l":"aoc/utils/Tree.html","n":"Tree","t":"class Tree[V](value: V, children: Set[Tree[V]])","d":"aoc/utils/Tree","k":"class"},
{"l":"aoc/utils/Tree.html","n":"isSubtreeOf","t":"def isSubtreeOf(other: Tree[V]): Boolean","d":"aoc/utils/Tree","k":"def"},
{"l":"aoc/utils/Tree.html","n":"vertices","t":"val vertices: Set[V]","d":"aoc/utils/Tree","k":"val"},
{"l":"docs/index.html","n":"aoc-N/A","t":"aoc-N/A","d":"","k":"static"}];